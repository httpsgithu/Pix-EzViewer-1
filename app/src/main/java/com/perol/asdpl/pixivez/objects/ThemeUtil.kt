/*
 * MIT License
 *
 * Copyright (c) 2020 ultranity
 * Copyright (c) 2019 Perol_Notsfsssf
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 */

package com.perol.asdpl.pixivez.objects

import android.content.Context
import android.util.TypedValue
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.google.android.material.color.DynamicColors
import com.perol.asdpl.pixivez.R
import com.perol.asdpl.pixivez.services.PxEZApp

class ThemeUtil {
    companion object {
        private val themeArray = arrayOf(
            R.style.AppThemeBase_Primary,
            R.style.AppThemeBase_blue,
            R.style.AppThemeBase_pink,
            R.style.AppThemeBase_miku,
            R.style.AppThemeBase_purple,
            R.style.AppThemeBase_cyan,
            R.style.AppThemeBase_green,
            R.style.AppThemeBase_indigo,
            R.style.AppThemeBase_red,
            R.style.AppThemeBase_now,
        )
        private val theme3Array = arrayOf(
            R.style.AppThemeBase3,
        )
        private val colorMap = HashMap<Int, Int>()
        const val halftrans = 0x089a9a9a
        const val transparent = 0x00000000
        fun resetColor(context: Context){
            colorMap.clear()
        }
        fun getColorPrimary(context: Context) =
            getAttrColor(context, androidx.appcompat.R.attr.colorPrimary)

        fun getColorPrimaryDark(context: Context) =
            getAttrColor(context, androidx.appcompat.R.attr.colorPrimaryDark)

        fun getColorHighlight(context: Context) =
            getAttrColor(context, com.google.android.material.R.attr.badgeTextColor)

        /**
         * Returns a color associated with a particular attr ID
         * <p>
         * Starting in {@link Build.VERSION_CODES#M}, the returned
         * color will be styled for the specified Context's theme.
         *
         * @param attrId The desired resource identifier, as generated by the aapt
         *           tool. This integer encodes the package, type, and resource
         *           entry. The value 0 is an invalid identifier.
         * @return A single color value in the form 0xAARRGGBB.
         * @throws android.content.res.Resources.NotFoundException if the given ID
         *         does not exist.
         */
        fun getAttrColor(context: Context, attrId: Int): Int {
            if (colorMap[attrId] == null) {
                val typedValue = TypedValue()
                context.theme.resolveAttribute(attrId, typedValue, true)
                colorMap[attrId] = ContextCompat.getColor(context, typedValue.resourceId)
            }
            return colorMap[attrId]!!
        }

        @JvmStatic
        fun themeInit(activity: AppCompatActivity) {
            activity.apply {
                val theme3 = PxEZApp.instance.pre.getBoolean("material3", false)
                val dynamicColor = PxEZApp.instance.pre.getBoolean("dynamicColor", false)
                if (theme3) {
                    setTheme(theme3Array[0])
                    if (dynamicColor and DynamicColors.isDynamicColorAvailable()){
                        DynamicColors.applyToActivityIfAvailable(activity)
                    }
                    //DynamicColors.applyToActivitiesIfAvailable(PxEZApp.instance)

                }
                else {
                    val intColor = PxEZApp.instance.pre.getInt("colorint", 0).run {
                        if ((this >=0) and (this < themeArray.size)) { this } else 0
                    }
                    setTheme(themeArray[intColor])
                }
            }
//            Colorful().apply(activity)
            //  activity.window.statusBarColor = Colorful().getPrimaryColor().getColorPack().normal().asInt()
        }
    }
}
